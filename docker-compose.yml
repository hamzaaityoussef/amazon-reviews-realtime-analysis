version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9093"]
      interval: 5s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo
    ports:
      - "27017:27017"

  spark:
    image: bitnami/spark:latest
    depends_on:
      - kafka
    environment:
      - SPARK_MODE=master

  producer:
    build: ./kafka
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
    command: python producer.py

  consumer:
    build:
      context: .
      dockerfile: kafka/consumer.Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
    command: python consumer.py

  # mongo_loader:
  #   build: ./data
  #   depends_on:
  #     - mongodb
  #   volumes:
  #     - ./data:/app/data
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   command: python mongo_loader.py

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    depends_on:
      - mongodb
    ports:
      - "5000:5000"
    volumes:
      - ./web:/app
    environment:
      - PYTHONUNBUFFERED=1